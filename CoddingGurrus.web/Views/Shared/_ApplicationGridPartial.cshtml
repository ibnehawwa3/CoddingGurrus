@using System.Text.RegularExpressions;
@{
    var Model = @ViewBag.gridViewModel;
    string UpdateAction = Model.Configuration.UpdateAction;
    string CreateAction = Model.Configuration.CreateAction;
    string DeleteAction = Model.Configuration.DeleteAction;
    string ControllerName = Model.Configuration.ControllerName;
}

<div class="col-12">
    <div class="card">
        <div class="card-header d-flex justify-content-between">
            <h3 class="card-title">@Model.Configuration.HeaderText</h3>
            <a asp-controller="@Model.Configuration.ControllerName" asp-action="@Model.Configuration.CreateAction" class="btn btn-primary d-none d-sm-inline-block">
                <!-- Download SVG icon from http://tabler-icons.io/i/plus -->
                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M12 5l0 14" /><path d="M5 12l14 0" /></svg>
                @Model.Configuration.CreateButtonText
            </a>
        </div>
        <div class="card-body border-bottom py-3">
            <div class="d-flex">
                <div class="text-muted">
                    Show
                    <div class="mx-2 d-inline-block">
                        <input type="text" class="form-control" value="8" size="3" aria-label="Invoices count">
                    </div>
                    entries
                </div>
                <div class="ms-auto text-muted">
                    Search:
                    <div class="ms-2 d-inline-block">
                        <input type="text" id="searchInput" placeholder="Search..." class="form-control" aria-label="Search invoice">
                    </div>
                </div>
            </div>
        </div>
        <div class="table-responsive">
            <table class="table card-table table-vcenter text-nowrap datatable" id="#userListTable">
                <thead>
                    <tr>
                        @foreach (var fileds in Model.Configuration.DisplayFields)
                        {
                            <th>@Regex.Replace(fileds, "([a-z])([A-Z])", "$1 $2")</th>
                        }
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Data)
                    {
                        <tr>
                            @foreach (var field in Model.Configuration.DisplayFields)
                            {
                                <td>@item.GetType().GetProperty(field).GetValue(item)</td>
                            }
                            <td class="text-end">
                                <span class="dropdown">
                                    <button class="btn dropdown-toggle align-text-top" data-bs-boundary="viewport" data-bs-toggle="dropdown">Actions</button>
                                    <div class="dropdown-menu dropdown-menu-end">
                                        <a class="dropdown-item" href="@Url.Action(UpdateAction,ControllerName)?id=@item.Id">
                                            Edit
                                        </a>
                                        <a class="dropdown-item" id="deleteItem" data-bs-toggle="modal" href="#" data-bs-target="#modal-danger" data-item-id="@item.Id">
                                            Delete
                                        </a>
                                    </div>
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <input type="hidden" id="skipValue" value="@Model.Configuration.Skip" />
        <div class="card-footer d-flex align-items-center" id="paginationDiv">
            <p class="m-0 text-muted">Showing <span>@Model.Configuration.Skip</span> to <span>@Model.Configuration.Take</span> of <span>@Model.Data[0].TotalRecords</span> entries</p>
            <ul class="pagination m-0 ms-auto">
                <li class="page-item" @(Model.Configuration.Skip == 1 ? " disabled" : "" )">
                    <a class="page-link" id="previousClick" href="#" tabindex="-1" aria-disabled="true">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 6l-6 6l6 6" /></svg>
                        prev
                    </a>
                </li>

                @for (int i = 1; i <= Model.Configuration.NoOfPages; i++)
                {
                    <li class="page-item @(i == Model.Configuration.Skip? "active" : "")">
                        <a class="page-link" href="#">@i</a>
                    </li>
                }
                <li class="page-item @(Model.Configuration.Skip == Model.Configuration.NoOfPages ? "disabled" : "")">
                    <a class="page-link" id="nextClick" href="#">
                        next 
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 6l6 6l-6 6" /></svg>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</div>
<input type="hidden" id="currentSkip" />
<div class="modal modal-blur fade" id="modal-danger" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
        <div class="modal-content">
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            <div class="modal-status bg-danger"></div>
            <div class="modal-body text-center py-4">
                <!-- Download SVG icon from http://tabler-icons.io/i/alert-triangle -->
                <svg xmlns="http://www.w3.org/2000/svg" class="icon mb-2 text-danger icon-lg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M10.24 3.957l-8.422 14.06a1.989 1.989 0 0 0 1.7 2.983h16.845a1.989 1.989 0 0 0 1.7 -2.983l-8.423 -14.06a1.989 1.989 0 0 0 -3.4 0z" /><path d="M12 9v4" /><path d="M12 17h.01" /></svg>
                <h3>Are you sure?</h3>
                <div class="text-muted">Do you really want to remove this item? What you've done cannot be undone.</div>
            </div>
            <div class="modal-footer">
                <div class="w-100">
                    <div class="row">
                        <div class="col">
                            <input type="hidden" id="Id" />
                            <a href="#" class="btn w-100" data-bs-dismiss="modal">
                                Cancel
                            </a>
                        </div>
                        <div class="col">
                            <a href="href=" #" id="deleteConfirm" class="btn btn-danger w-100" data-bs-dismiss="modal">
                                Delete
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {

        var pageSize;

        $(document).on('click', '#previousClick', function (event) {
            event.preventDefault();
            var currentSkipValue = parseInt($('#currentSkip').val(), 0);
            if (currentSkipValue > 1) {
                var skipValue = parseInt($("#skipValue").val());
                skipValue -= 1;
                $("#skipValue").val(skipValue);
                pagination(skipValue);
            }
        });


        $(document).on('click', '#nextClick', function (event) {
            event.preventDefault();
            var skipValue = parseInt($("#skipValue").val());
            if (skipValue < @Model.Configuration.NoOfPages) {
                skipValue += 1;
                $("#skipValue").val(skipValue);
                pagination(skipValue);
            }
        });

        $(document).on('click', '.page-link', function (event) {
            event.preventDefault();
            var pageNumber = parseInt($(this).text()); 
            $("#skipValue").val(pageNumber);
            pagination(pageNumber);
        });

        // Attach click event handler to the previous button
        $("#previousClick").on('click', function (e) {
            debugger
            e.preventDefault(); // Prevent the default behavior of the anchor link
            var skipValue = parseInt($("#skipValue").val());
            if (skipValue > 1) {
                debugger
                var pageSize = @ViewBag.pageSize - 1;
                skipValue += 1;
                $("#skipValue").val(skipValue);
                pagination(pageSize);
            }
        });

        function pagination(pageSize) {
            debugger
            var controllerName = '@Model.Configuration.ControllerName';
            $.ajax({
                url: "/" + controllerName + "/HandlePagination",
                type: "GET",
                data: { pageSize: pageSize },
                success: function (data) {
                    debugger
                    $(".pagination").find("li.page-item").remove();

                    var paginationUl = $('<ul class="pagination m-0 ms-auto"></ul>');

                    // Add the previous button
                    var previousClass = (data.configuration.skip == 1) ? "disabled" : "";
                    var previousButton = $('<li class="page-item ' + previousClass + '"></li>');
                    var previousLink = $('<a class="page-link" id="previousClick" href="#"></a>');
                    previousLink.append('<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M15 6l-6 6l6 6" /></svg>prev');
                    previousButton.append(previousLink);
                    paginationUl.append(previousButton);

                    // Add page items
                    for (var i = 1; i <= data.configuration.noOfPages; i++) {
                        var activeClass = (i == data.configuration.skip) ? "active" : "";
                        var pageItem = $('<li class="page-item ' + activeClass + '"></li>');
                        var pageLink = $('<a class="page-link" href="#">' + i + '</a>');
                        pageItem.append(pageLink);
                        paginationUl.append(pageItem);
                    }

                    // Add the next button
                    var nextClass = (data.configuration.skip == data.configuration.noOfPages) ? "disabled" : "";
                    var nextButton = $('<li class="page-item ' + nextClass + '"></li>');
                    var nextLink = $('<a class="page-link" id="nextClick" href="#"></a>');
                    nextLink.append('next ');
                    nextLink.append('<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none" /><path d="M9 6l6 6l-6 6" /></svg>');
                    nextButton.append(nextLink);
                    paginationUl.append(nextButton);

                    $('#currentSkip').val(data.configuration.skip);

                    // Append the pagination element to the specified div with id "paginationDiv"
                    $("#paginationDiv").empty().append(paginationUl);
                    var element = document.getElementById("paginationDiv");
                    if (data.configuration.skip > 0) {
                        if (element) {
                            element.style.display = "block";
                        }
                    }
                    else {
                        element.style.display = "none !important";
                    }

                    var updatedModel = data;
                    var displayFieldsArray = updatedModel;
                    if (displayFieldsArray) {
                        updateGrid(updatedModel);
                    } else {
                        console.error("displayFields is not an array or is undefined.");
                    }
                },

                error: function () {
                    console.log("Error during AJAX request");
                }
            });
        }


        $("#searchInput").on('input', function () {
            var controllerName = '@Model.Configuration.ControllerName';
            var searchTerm = $(this).val();
            $.ajax({
                url: "/" + controllerName + "/Search",
                type: "GET",
                data: { searchTerm: searchTerm },
                success: function (data) {
                    debugger;
                    var element = document.getElementById("paginationDiv");
                    if (data.configuration.skip > 0) {
                        if (element) {
                            element.style.display = "block";
                        }
                    }
                    else {
                        element.style.display = "none !important";
                    }

                    var updatedModel = data;
                    var displayFieldsArray = updatedModel;
                    if (displayFieldsArray) {
                        updateGrid(updatedModel);
                    } else {
                        console.error("displayFields is not an array or is undefined.");
                    }
                },

                error: function () {
                    console.log("Error during AJAX request");
                }
            });
        });

        function updateGrid(dataModel) {

            $("tbody").find("tr").remove();

            $.each(dataModel.data, function (index, item) {
                var row = $('<tr>');

                dataModel.configuration.displayFields.forEach(field => {
                    const modifiedStr = field.charAt(0).toLowerCase() + field.slice(1);
                    if (modifiedStr in item) {
                        row.append(`<td>${item[modifiedStr]}</td>`);
                    } else {
                        console.log(`Key '${modifiedStr}' not found in the object.`);
                    }
                });

                row.append('<td class="text-end">' +
                    '<span class="dropdown">' +
                    '<button class="btn dropdown-toggle align-text-top" data-bs-boundary="viewport" data-bs-toggle="dropdown">Actions</button>' +
                    '<div class="dropdown-menu dropdown-menu-end">' +
                    '<a class="dropdown-item" href="@Url.Action("Edit", "User")?id=' + item.id + '">Edit</a>' +
                    '<a class="dropdown-item" id="deleteItem" data-bs-toggle="modal" href="#" data-bs-target="#modal-danger" data-item-id="' + item.id + '">Delete</a>' +
                    '</div>' +
                    '</span>' +
                    '</td>');


                $("tbody").append(row);
            });
        }
    });

    $(document).ready(function () {
        $(document).on("click", "#deleteItem", function () {
            var d = $(this).data("item-id");
            $("#Id").val(d);
        });
    });


    $("#deleteConfirm").click(function () {
        var id = $("#Id").val();
        debugger
        $.ajax({
            url: '@Url.Action(DeleteAction, ControllerName)',
            type: 'POST',
            data: { id: id },
            success: function (response) {
                toastr.success('Item deleted successfully.', 'Success');
                setTimeout(function () {
                    location.reload();
                }, 1000);
            },
            error: function (xhr, status, error) {
                debugger
                toastr.error('Failed to delete item. Please try again.', 'Error');
                console.error(xhr.responseText);
            }
        });
    });

</script>
